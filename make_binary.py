
import sys
from itertools import batched

def main():
    if len(sys.argv) < 2:
        print("Usage: make_binary.py BINARY_FILENAME")
        exit(1)

    filename = sys.argv[1]
    identifier = filename.replace(".", "_").replace("-", "_").lower()
    constant = identifier.upper()

    binary = open(filename, "rb").read()
    c_filename = identifier + ".c"
    h_filename = identifier + ".h"

    with open(c_filename, "w") as f:
        f.write("// Generated by make_binary.py from \"%s\". Do not modify.\n" % (filename,))
        f.write("\n")
        f.write('#include "%s"\n' % (h_filename,))
        f.write("\n")
        f.write("uint8_t %s[] = {\n" % (constant,));
        for batch in batched(binary, 16):
            f.write("    " + "".join("0x%02X, " % b for b in batch) + "\n")
        f.write("};\n")

    with open(h_filename, "w") as f:
        f.write("// Generated by make_binary.py from \"%s\". Do not modify.\n" % (filename,))
        f.write("\n")
        f.write("#pragma once\n")
        f.write("\n")
        f.write("#include <stdint.h>\n")
        f.write("\n")
        f.write("#define %s_SIZE %d\n" % (constant, len(binary)))
        f.write("extern uint8_t %s[];\n" % (constant,))

main()
